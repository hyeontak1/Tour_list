<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="memberMapper">
    
    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
    <resultMap id="memberMap" type="tour.list.web.model.member">
        <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
        <result property="idNum" column="idNum" />
        <result property="id" column="id" />
        <result property="password" column="password" />
        <result property="name" column="name" />
        <result property="gender" column="gender" />
        <result property="birth" column="birth" />
        <result property="mail" column="mail" />
        <result property="phone" column="phone" />
        <result property="address" column="address" />
         <result property="reg" column="reg" />
    </resultMap>
    
    <!-- 단일행 조회를 위한 기능 정의 -->
    <select id="selectItem" 
            parameterType="tour.list.web.model.member"
            resultMap="memberMap">
        <!-- "#{변수명}" 으로 표시된 곳에 멤버변수가 치환된다. -->
        SELECT idNum ,id,password,name,gender,birth,mail,phone,address,reg FROM member WHERE idNum=#{idNum};
    </select>
    
    <!-- 다중행 조회를 위한 기능 정의 -->
     <select id ="selectList"
       parameterType="tour.list.web.model.member"
       resultMap="memberMap">
       select idNum,id,password,name,gender,birth,mail,phone,address,reg from member
       <where>
       <!-- Beans의 멤버 변수 -->
       <!-- 조건에 맞는 조건절을 추가 -->
          <if test="id != null and id != ''">
          <!-- LIKE '%#{dname}%'->LIKE '%',#{검색어},'%' -홑따옴표('') -->
             id LIKE concat('%',#{id},'%')
          </if>
          
          <if test= "name != null and name !=''">
           or name LIKE 
               ('%',#{name},'%')
          </if>
       </where>
       order by idNum DESC
       <if test ="listCount>0">
          LIMIT #{offset},#{listCount}
       </if>
       </select>
    
    <!-- 데이터 수 조회를 위한 기능 정의 -->
    <select id="selectCount" 
            parameterType="tour.list.web.model.member"
            resultType="int">
        <!-- 이 안에서 처리할 SQL문을 명시한다. -->
        SELECT count(*) FROM member;
        <where>
       <!-- Beans의 멤버 변수 -->
       <!-- 조건에 맞는 조건절을 추가 -->
          <if test="id != null and id != ''">
          <!-- LIKE '%#{dname}%'->LIKE '%',#{검색어},'%' -홑따옴표('') -->
             id LIKE concat('%',#{id},'%')
          </if>
          
          <if test= "name != null and name !=''">
           or name LIKE 
               ('%',#{name},'%')
          </if>
       </where>
    </select>
    
    <!-- 데이터 저장을 위한 기능 정의 -->
    <insert id="insertItem" 
            parameterType="tour.list.web.model.member"
            useGeneratedKeys="true"
            keyProperty="idNum">
        <!-- "#{변수명}" 으로 표시된 곳에 Beans의 멤버변수가 치환된다. -->
        INSERT INTO member (id,password,name,gender,birth,mail,phone,address,reg) VALUES (#{id},#{password},#{name},#{gender},#{birth},#{mail},#{phone},#{address},#{reg});
    </insert>
    
    <!-- 데이터 삭제를 위한 기능 정의 -->
    <delete id="deleteItem" parameterType="tour.list.web.model.member">
        <!-- 이 안에서 처리할 SQL문을 명시한다. -->
        DELETE FROM member WHERE idNum=#{idNum};
    </delete>
    
    <!-- 데이터 갱신을 위한 기능 정의 -->
    <update id="updateItem" parameterType="tour.list.web.model.member">
        <!-- 이 안에서 처리할 SQL문을 명시한다. -->
        UPDATE department SET id=#{id}, password=#{password}, name=#{name}, gender=#{gender}, birth=#{birth}, mail=#{mail}, phone=#{phone}, address=#{address}, reg=#{reg} Where idNum=#{idNum};
    </update>
    
    
</mapper>