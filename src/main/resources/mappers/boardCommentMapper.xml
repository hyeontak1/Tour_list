<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="boardCommentMapper">
    
    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
    <resultMap id="boardCommentMap" type="tour.list.web.model.member">
        <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
        <result property="idboardComment" column="idboardComment" />
        <result property="member1_idNum" column="member1_idNum" />
        <result property="board_idBoard" column="board_idBoard" />
        <result property="cdate" column="cdate" />
        <result property="cwrite" column="cwrite" />
    </resultMap>
    
    <!-- 단일행 조회를 위한 기능 정의 -->
    <select id="selectItem" 
            parameterType="tour.list.web.model.member"
            resultMap="boardCommentMap">
        <!-- "#{변수명}" 으로 표시된 곳에 멤버변수가 치환된다. -->
        SELECT idboardComment ,member1_idNum,board_idBoard,cdate,cwrite FROM boardComment WHERE idboardComment=#{idboardComment};
    </select>
    
    <!-- 다중행 조회를 위한 기능 정의 -->
     <select id ="selectList"
       parameterType="tour.list.web.model.member"
       resultMap="boardCommentMap">
       select idboardComment ,member1_idNum,board_idBoard,cdate,cwrite FROM boardComment 
       <where>
       <!-- Beans의 멤버 변수 -->
       <!-- 조건에 맞는 조건절을 추가 -->
          <if test="member1_idNum != null and member1_idNum != ''">
          <!-- LIKE '%#{member1_idNum}%'->LIKE '%',#{검색어},'%' -홑따옴표('') -->
             member1_idNum LIKE concat('%',#{member1_idNum},'%')
          </if>
          
          <if test= "board_idBoard != null and member1_idNum !=''">
           or member1_idNum LIKE 
               ('%',#{member1_idNum},'%')
          </if>
       </where>
       order by idboardComment DESC
       <if test ="listCount>0">
          LIMIT #{offset},#{listCount}
       </if>
       </select>
    
    <!-- 데이터 수 조회를 위한 기능 정의 -->
    <select id="selectCount" 
            parameterType="tour.list.web.model.member"
            resultType="int">
        <!-- 이 안에서 처리할 SQL문을 명시한다. -->
        SELECT count(*) FROM boardComment;
        <where>
       <!-- Beans의 멤버 변수 -->
       <!-- 조건에 맞는 조건절을 추가 -->
          <if test="member1_idNum != null and member1_idNum != ''">
          <!-- LIKE '%#{member1_idNum}%'->LIKE '%',#{검색어},'%' -홑따옴표('') -->
             member1_idNum LIKE concat('%',#{member1_idNum},'%')
          </if>
          
          <if test= "board_idBoard != null and member1_idNum !=''">
           or board_idBoard LIKE 
               ('%',#{board_idBoard},'%')
          </if>
       </where>
    </select>
    
    <!-- 데이터 저장을 위한 기능 정의 -->
    <insert id="insertItem" 
            parameterType="tour.list.web.model.member"
            useGeneratedKeys="true"
            keyProperty="idboardComment">
        <!-- "#{변수명}" 으로 표시된 곳에 Beans의 멤버변수가 치환된다. -->
        INSERT INTO boardComment (member1_idNum,board_idBoard,cdate,cwrite) VALUES (#{member1_idNum},#{board_idBoard},#{cdate},#{cwrite});
    </insert>
    
    <!-- 데이터 삭제를 위한 기능 정의 -->
    <delete id="deleteItem" parameterType="tour.list.web.model.member">
        <!-- 이 안에서 처리할 SQL문을 명시한다. -->
        DELETE FROM boardComment WHERE idboardComment=#{idboardComment};
    </delete>
    
    <!-- 데이터 갱신을 위한 기능 정의 -->
    <update id="updateItem" parameterType="tour.list.web.model.member">
        <!-- 이 안에서 처리할 SQL문을 명시한다. -->
        UPDATE boardComment SET member1_idNum=#{member1_idNum}, board_idBoard=#{board_idBoard}, cdate=#{cdate}, cwrite=#{cwrite} Where idboardComment=#{idboardComment};
    </update>
    
    
</mapper>